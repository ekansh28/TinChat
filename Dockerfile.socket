
# Use an official Node.js runtime as a parent image
FROM node:20-slim

# Set the working directory in the container
WORKDIR /usr/src/app

# Copy package.json and package-lock.json (or yarn.lock)
COPY package*.json ./

# Install app dependencies
# Using npm ci for cleaner, more reliable installs in CI/CD
RUN npm ci --only=production

# Copy the rest of the application code into the working directory
# Specifically copy the server directory and tsconfig for compilation if needed for the server
COPY server ./server
COPY tsconfig.json ./tsconfig.json

# If your server needs to compile TypeScript at runtime (e.g. using tsx without a build step)
# you might need devDependencies. For a production build, it's better to compile first.
# For simplicity with tsx, we'll ensure tsx is available if it's used to run the server.
# If you precompile, you can remove the devDependencies install step.
# Re-install all dependencies including devDependencies if tsx is needed for runtime
RUN npm install --ignore-scripts

# Make port 3001 available to the world outside this container
# Cloud Run will set the PORT environment variable, which your server/index.ts respects.
# This EXPOSE is more for documentation and local Docker runs.
EXPOSE 3001

# Define environment variables (Cloud Run often sets PORT automatically)
ENV NODE_ENV=production

# Run the app using tsx (ensure tsx is in dependencies or devDependencies if re-installed)
# For a more robust production setup, you'd compile TypeScript to JavaScript first
# and then run `node server/index.js`
CMD [ "npx", "tsx", "server/index.ts" ]
