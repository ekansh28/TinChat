- name: üöÄ Deploy & Update Server
  env:
    SERVER_USER: ${{ secrets.SERVER_USER }}
    SERVER_HOST: ${{ secrets.SERVER_HOST }}
    SERVER_PROJECT_PATH: ${{ secrets.SERVER_PROJECT_PATH }}
    SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
    SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
    UPSTASH_REDIS_REST_URL: ${{ secrets.UPSTASH_REDIS_REST_URL }}
    UPSTASH_REDIS_REST_TOKEN: ${{ secrets.UPSTASH_REDIS_REST_TOKEN }}
  run: |
    ssh -o StrictHostKeyChecking=no -o ConnectTimeout=30 "$SERVER_USER@$SERVER_HOST" bash -s <<'SCRIPT'
      set -euo pipefail
      
      SERVER_PROJECT_PATH="${{ secrets.SERVER_PROJECT_PATH }}"
      
      echo "üìÇ Changing to server directory: $SERVER_PROJECT_PATH"
      cd "$SERVER_PROJECT_PATH"
      
      # ‚úÖ FORCE PULL: Remove any local changes and pull latest from GitHub
      echo "üîÑ Fetching latest changes from GitHub..."
      git fetch origin main || {
        echo "‚ùå Failed to fetch from origin"
        exit 1
      }
      
      echo "üìù Current branch: $(git branch --show-current)"
      echo "üìù Current local commit: $(git rev-parse --short HEAD)"
      echo "üìù Latest remote commit: $(git rev-parse --short origin/main)"
      
      # Check if there are any uncommitted changes
      if ! git diff-index --quiet HEAD --; then
        echo "‚ö†Ô∏è Found uncommitted changes on VPS, discarding them..."
        git reset --hard HEAD
      fi
      
      # Check if there are any untracked files
      if [ -n "$(git status --porcelain)" ]; then
        echo "‚ö†Ô∏è Found untracked files on VPS, cleaning them..."
        git clean -fd
      fi
      
      # Force reset to latest main branch (this will discard any local changes)
      echo "üîÑ Force updating to latest main branch..."
      git reset --hard origin/main || {
        echo "‚ùå Failed to reset to origin/main"
        exit 1
      }
      
      echo "‚úÖ Repository forcefully updated to commit: $(git rev-parse --short HEAD)"
      
      # ‚úÖ FIXED: Better dependency management
      echo "üì¶ Installing/updating dependencies..."
      
      # Clear node_modules if package files might have changed
      if git diff --name-only HEAD~1 HEAD | grep -q "package-lock.json\|package.json" || [ ! -d "node_modules" ]; then
        echo "üì¶ Package files changed or node_modules missing, reinstalling..."
        rm -rf node_modules package-lock.json
        npm install --only=production || {
          echo "‚ùå Failed to install production dependencies"
          exit 1
        }
      else
        echo "üì¶ No package changes detected, keeping existing dependencies"
      fi
      
      echo "‚úÖ Dependencies ready"
      
      # ‚úÖ Create .env file using GitHub secrets, not VPS variables
      echo "üîß Creating environment file from GitHub secrets..."
      
      cat > .env <<'ENV_FILE'
SUPABASE_SERVICE_ROLE_KEY=${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
SUPABASE_URL=${{ secrets.SUPABASE_URL }}
UPSTASH_REDIS_REST_URL=${{ secrets.UPSTASH_REDIS_REST_URL }}
UPSTASH_REDIS_REST_TOKEN=${{ secrets.UPSTASH_REDIS_REST_TOKEN }}
NODE_ENV=production
PORT=3001
ENV_FILE
      
      echo "‚úÖ Environment variables set from GitHub secrets"
      
      # ‚úÖ TypeScript build with proper error handling
      echo "üèóÔ∏è Building TypeScript..."
      
      # Clean previous build
      rm -rf dist
      
      # Build with explicit error handling
      if ! npx tsc --build; then
        echo "‚ùå TypeScript build failed"
        echo "üìã Build logs:"
        npx tsc --build --verbose || true
        exit 1
      fi
      
      # Verify build output
      if [ ! -d "dist" ] || [ ! -f "dist/index.js" ]; then
        echo "‚ùå Build output validation failed"
        echo "üìÇ Dist directory contents:"
        ls -la dist/ || echo "Dist directory does not exist"
        exit 1
      fi
      
      echo "‚úÖ TypeScript build completed successfully"
      
      # ‚úÖ PM2 process management with better error handling
      echo "üîÅ Managing PM2 processes..."
      
      # Check if PM2 is installed
      if ! command -v pm2 &> /dev/null; then
        echo "‚ùå PM2 is not installed"
        exit 1
      fi
      
      # Stop existing processes gracefully
      echo "üõë Stopping existing processes..."
      pm2 stop all || echo "‚ö†Ô∏è No processes to stop"
      
      # Start/restart the application
      echo "üöÄ Starting TinChat server..."
      if [ -f "ecosystem.config.js" ]; then
        pm2 start ecosystem.config.js --update-env || {
          echo "‚ùå Failed to start with ecosystem config"
          exit 1
        }
      else
        pm2 start dist/index.js --name "tinchat-server" --update-env || {
          echo "‚ùå Failed to start server directly"
          exit 1
        }
      fi
      
      # Wait for server to start
      echo "‚è≥ Waiting for server to stabilize..."
      sleep 15
      
      # Save PM2 configuration
      pm2 save || echo "‚ö†Ô∏è Failed to save PM2 configuration"
      
      echo "‚úÖ PM2 processes started successfully"
    SCRIPT