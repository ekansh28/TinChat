name: 🚀 Deploy Server to VPS

on:
  push:
    branches:
      - main
    paths:
      - 'server/**'
      - '.github/workflows/deploy-server.yml'
  workflow_dispatch:  # Allows manual triggering

jobs:
  deploy:
    name: 🔁 Deploy Server on VPS
    runs-on: ubuntu-latest

    steps:
      - name: ⬇️ Checkout Repository
        uses: actions/checkout@v3

      - name: 🔐 Setup SSH Agent
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SERVER_DEPLOY_KEY }}

      - name: 🔧 Configure SSH (Skip Host Key Verification)
        run: |
          mkdir -p ~/.ssh
          cat >> ~/.ssh/config << 'EOF'
          Host *
              StrictHostKeyChecking no
              UserKnownHostsFile /dev/null
              ConnectTimeout 30
              ServerAliveInterval 60
              LogLevel ERROR
          EOF
          chmod 600 ~/.ssh/config
          echo "✅ SSH configured to skip host key verification"
          
      - name: 🔍 Verify Environment Variables
        env:
          SERVER_HOST: ${{ secrets.SERVER_HOST }}
          SERVER_PROJECT_PATH: ${{ secrets.SERVER_PROJECT_PATH }}
          SERVER_USER: ${{ secrets.SERVER_USER }}
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
          NEXT_PUBLIC_API_BASE_URL: ${{ secrets.NEXT_PUBLIC_API_BASE_URL }}
          NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY: ${{ secrets.NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY }}
          CLERK_SECRET_KEY: ${{ secrets.CLERK_SECRET_KEY }}
          CLERK_WEBHOOK_SECRET: ${{ secrets.CLERK_WEBHOOK_SECRET }}
        run: |
          echo "🔍 Checking environment variables for server deployment:"
          echo "  - SERVER_HOST length: ${#SERVER_HOST}"
          echo "  - SERVER_PROJECT_PATH length: ${#SERVER_PROJECT_PATH}"
          echo "  - SERVER_USER length: ${#SERVER_USER}"
          echo "  - NEXT_PUBLIC_SUPABASE_URL length: ${#NEXT_PUBLIC_SUPABASE_URL}"
          echo "  - NEXT_PUBLIC_SUPABASE_ANON_KEY length: ${#NEXT_PUBLIC_SUPABASE_ANON_KEY}"
          echo "  - SUPABASE_SERVICE_ROLE_KEY length: ${#SUPABASE_SERVICE_ROLE_KEY}"
          echo "  - NEXT_PUBLIC_API_BASE_URL length: ${#NEXT_PUBLIC_API_BASE_URL}"
          echo "  - NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY length: ${#NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY}"
          echo "  - CLERK_SECRET_KEY length: ${#CLERK_SECRET_KEY}"
          echo "  - CLERK_WEBHOOK_SECRET length: ${#CLERK_WEBHOOK_SECRET}"
          
          if [[ -z "$SERVER_HOST" ]]; then
            echo "❌ SERVER_HOST is empty!"
            exit 1
          fi
          
          if [[ -z "$SERVER_PROJECT_PATH" ]]; then
            echo "❌ SERVER_PROJECT_PATH is empty!"
            exit 1
          fi
          
          if [[ -z "$SERVER_USER" ]]; then
            echo "❌ SERVER_USER is empty!"
            exit 1
          fi
          
          if [[ -z "$NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY" ]]; then
            echo "❌ NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY is empty!"
            exit 1
          fi
          
          if [[ -z "$CLERK_SECRET_KEY" ]]; then
            echo "❌ CLERK_SECRET_KEY is empty!"
            exit 1
          fi
          
          if [[ -z "$CLERK_WEBHOOK_SECRET" ]]; then
            echo "❌ CLERK_WEBHOOK_SECRET is empty!"
            exit 1
          fi
          
          echo "✅ Required environment variables are present"

      - name: 🚀 Deploy Server on VPS
        env:
          SERVER_USER: ${{ secrets.SERVER_USER }}
          SERVER_HOST: ${{ secrets.SERVER_HOST }}
          SERVER_PROJECT_PATH: ${{ secrets.SERVER_PROJECT_PATH }}
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
          NEXT_PUBLIC_API_BASE_URL: ${{ secrets.NEXT_PUBLIC_API_BASE_URL }}
          NEXT_PUBLIC_SOCKET_SERVER_URL: ${{ secrets.NEXT_PUBLIC_SOCKET_SERVER_URL }}
          NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY: ${{ secrets.NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY }}
          CLERK_SECRET_KEY: ${{ secrets.CLERK_SECRET_KEY }}
          CLERK_WEBHOOK_SECRET: ${{ secrets.CLERK_WEBHOOK_SECRET }}
          UPSTASH_REDIS_REST_URL: ${{ secrets.UPSTASH_REDIS_REST_URL }}
          UPSTASH_REDIS_REST_TOKEN: ${{ secrets.UPSTASH_REDIS_REST_TOKEN }}
        run: |
          echo "🔍 Starting server deployment process..."
          echo "📋 Environment variables check:"
          echo "  - SERVER_HOST: $SERVER_HOST"
          echo "  - SERVER_USER: $SERVER_USER"
          echo "  - SERVER_PROJECT_PATH: $SERVER_PROJECT_PATH"
          echo "  - NEXT_PUBLIC_API_BASE_URL: $NEXT_PUBLIC_API_BASE_URL"
          echo "  - NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY length: ${#NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY}"
          echo "  - CLERK_SECRET_KEY length: ${#CLERK_SECRET_KEY}"
          echo "  - CLERK_WEBHOOK_SECRET length: ${#CLERK_WEBHOOK_SECRET}"
          
          # Trim whitespace and newlines from path (safety check)
          CLEAN_PATH=$(echo "$SERVER_PROJECT_PATH" | tr -d '\n' | sed 's/ *$//')
          echo "  - CLEAN_PATH: $CLEAN_PATH"
          
          # First-time setup check with proper permissions
          echo "🛠️ Checking if project directory exists..."
          ssh $SERVER_USER@$SERVER_HOST "
            echo '🔍 Current user: \$(whoami)'
            echo '🔍 Home directory: \$HOME'
            echo '🔍 Current working directory: \$(pwd)'
            
            # Use a safe directory path that the user has access to
            if [[ '$CLEAN_PATH' == /home/* ]]; then
              # If path starts with /home/, make sure we use the user's home
              PROJECT_DIR=\"\$HOME/\$(basename '$CLEAN_PATH')\"
            else
              PROJECT_DIR='$CLEAN_PATH'
            fi
            
            echo '🔍 Target project directory: '\$PROJECT_DIR
            
            if [ ! -d \"\$PROJECT_DIR\" ]; then
              echo '🛠️ First-time setup: Creating project directory...'
              mkdir -p \"\$PROJECT_DIR\" || {
                echo '❌ Cannot create directory '\$PROJECT_DIR
                echo '🔍 Trying to create in home directory instead...'
                PROJECT_DIR=\"\$HOME/TinChat\"
                mkdir -p \"\$PROJECT_DIR\" || {
                  echo '❌ Cannot create directory in home either'
                  echo '🔍 Available space and permissions:'
                  df -h \$HOME
                  ls -la \$HOME
                  exit 1
                }
              }
              
              echo '📥 Cloning repository to '\$PROJECT_DIR'...'
              git clone https://github.com/ekansh28/TinChat.git \"\$PROJECT_DIR\" || {
                echo '❌ Git clone failed'
                echo '🔍 Checking git availability:'
                which git || echo 'Git not found'
                exit 1
              }
              echo '✅ Repository cloned successfully to '\$PROJECT_DIR
            else
              echo '✅ Project directory already exists at '\$PROJECT_DIR
            fi
            
            # Export the final project directory for the main deployment
            echo \"export FINAL_PROJECT_DIR=\\\"\$PROJECT_DIR\\\"\" > /tmp/project_path.sh
          "
          
          # Pass environment variables to SSH session for server
          echo "🚀 Starting main server deployment process..."
          ssh $SERVER_USER@$SERVER_HOST "
            export NEXT_PUBLIC_SUPABASE_URL='$NEXT_PUBLIC_SUPABASE_URL'
            export NEXT_PUBLIC_SUPABASE_ANON_KEY='$NEXT_PUBLIC_SUPABASE_ANON_KEY'
            export SUPABASE_SERVICE_ROLE_KEY='$SUPABASE_SERVICE_ROLE_KEY'
            export NEXT_PUBLIC_API_BASE_URL='$NEXT_PUBLIC_API_BASE_URL'
            export NEXT_PUBLIC_SOCKET_SERVER_URL='$NEXT_PUBLIC_SOCKET_SERVER_URL'
            export NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY='$NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY'
            export CLERK_SECRET_KEY='$CLERK_SECRET_KEY'
            export CLERK_WEBHOOK_SECRET='$CLERK_WEBHOOK_SECRET'
            export UPSTASH_REDIS_REST_URL='$UPSTASH_REDIS_REST_URL'
            export UPSTASH_REDIS_REST_TOKEN='$UPSTASH_REDIS_REST_TOKEN'
            
            set -e
            
            # Load the correct project directory
            if [ -f /tmp/project_path.sh ]; then
              source /tmp/project_path.sh
              echo '🔍 Using project directory: '\$FINAL_PROJECT_DIR
            else
              # Fallback to home directory
              FINAL_PROJECT_DIR=\"\$HOME/TinChat\"
              echo '🔍 Fallback to home directory: '\$FINAL_PROJECT_DIR
            fi
            
            echo '📂 Changing to project directory...'
            cd \"\$FINAL_PROJECT_DIR\" || { 
              echo '❌ Directory missing: '\$FINAL_PROJECT_DIR
              echo '🔍 Available directories in home:'
              ls -la \$HOME
              exit 1
            }
            echo '✅ Current directory: '\$(pwd)
            
            echo '🔄 Force updating repository...'
            git fetch --all
            git reset --hard origin/main
            git clean -fd
            echo '✅ Repository updated successfully'
            
            echo '🔧 Creating server .env.local file...'
            
            # Create .env.local file for server with ALL environment variables including Clerk
            echo \"NEXT_PUBLIC_SUPABASE_URL=\$NEXT_PUBLIC_SUPABASE_URL\" > .env.local
            echo \"NEXT_PUBLIC_SUPABASE_ANON_KEY=\$NEXT_PUBLIC_SUPABASE_ANON_KEY\" >> .env.local
            echo \"SUPABASE_SERVICE_ROLE_KEY=\$SUPABASE_SERVICE_ROLE_KEY\" >> .env.local
            echo \"NEXT_PUBLIC_API_BASE_URL=\$NEXT_PUBLIC_API_BASE_URL\" >> .env.local
            echo \"NEXT_PUBLIC_SOCKET_SERVER_URL=\$NEXT_PUBLIC_SOCKET_SERVER_URL\" >> .env.local
            echo \"NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY=\$NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY\" >> .env.local
            echo \"CLERK_SECRET_KEY=\$CLERK_SECRET_KEY\" >> .env.local
            echo \"CLERK_WEBHOOK_SECRET=\$CLERK_WEBHOOK_SECRET\" >> .env.local
            echo \"UPSTASH_REDIS_REST_URL=\$UPSTASH_REDIS_REST_URL\" >> .env.local
            echo \"UPSTASH_REDIS_REST_TOKEN=\$UPSTASH_REDIS_REST_TOKEN\" >> .env.local
            echo \"NODE_ENV=production\" >> .env.local
            
            # Debug: Show what variables we have (safely)
            echo '🔍 Environment variables available in SSH session:'
            echo \"  NEXT_PUBLIC_SUPABASE_URL length: \${#NEXT_PUBLIC_SUPABASE_URL}\"
            echo \"  NEXT_PUBLIC_SUPABASE_ANON_KEY length: \${#NEXT_PUBLIC_SUPABASE_ANON_KEY}\"
            echo \"  SUPABASE_SERVICE_ROLE_KEY length: \${#SUPABASE_SERVICE_ROLE_KEY}\"
            echo \"  NEXT_PUBLIC_API_BASE_URL length: \${#NEXT_PUBLIC_API_BASE_URL}\"
            echo \"  NEXT_PUBLIC_SOCKET_SERVER_URL length: \${#NEXT_PUBLIC_SOCKET_SERVER_URL}\"
            echo \"  NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY length: \${#NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY}\"
            echo \"  CLERK_SECRET_KEY length: \${#CLERK_SECRET_KEY}\"
            echo \"  CLERK_WEBHOOK_SECRET length: \${#CLERK_WEBHOOK_SECRET}\"
            echo \"  UPSTASH_REDIS_REST_URL length: \${#UPSTASH_REDIS_REST_URL}\"
            echo \"  UPSTASH_REDIS_REST_TOKEN length: \${#UPSTASH_REDIS_REST_TOKEN}\"
            
            echo '✅ Server environment file created'
            echo '🔍 Environment file contents (redacted):'
            sed 's/=.*/=***REDACTED***/g' .env.local
            
            echo '🔍 Checking server directory...'
            if [ -d \"server\" ]; then
              echo '✅ Server directory found'
              ls -la server/
            else
              echo '❌ Server directory not found!'
              echo '🔍 Available directories:'
              ls -la
              exit 1
            fi
            
            echo '📦 Installing server dependencies...'
            
            # Check if server has its own package.json
            if [ -f \"server/package.json\" ]; then
              echo '📦 Installing server-specific dependencies...'
              cd server
              
              # Clean install for server
              rm -rf node_modules package-lock.json
              npm cache clean --force 2>/dev/null || true
              
              npm install --no-audit --no-fund || {
                echo '❌ Server npm install failed, trying alternatives...'
                npm install --legacy-peer-deps --no-audit --no-fund || {
                  echo '❌ Server dependency installation failed'
                  echo '🔍 Node and npm versions:'
                  node --version
                  npm --version
                  echo '🔍 Server package.json:'
                  cat package.json | head -20
                  exit 1
                }
              }
              
              echo '✅ Server dependencies installed'
              cd ..
            else
              echo '📦 Installing root project dependencies for server...'
              
              # Clean install for root project
              rm -rf node_modules package-lock.json
              npm cache clean --force 2>/dev/null || true
              
              npm install --no-audit --no-fund || {
                echo '❌ Root npm install failed, trying alternatives...'
                npm install --legacy-peer-deps --no-audit --no-fund || {
                  echo '❌ Root dependency installation failed'
                  exit 1
                }
              }
              
              echo '✅ Root dependencies installed'
            fi
            
            echo '🔍 Checking for TypeScript compilation...'
            if [ -f \"server/tsconfig.json\" ] || grep -q '\"tsx\"' package.json 2>/dev/null; then
              echo '🔧 TypeScript detected, checking if compilation is needed...'
              if [ -f \"server/dist\" ] || npm run --silent server:build >/dev/null 2>&1; then
                echo '✅ TypeScript compilation successful or not needed'
              else
                echo '⚠️ TypeScript compilation skipped or failed, continuing...'
              fi
            else
              echo '✅ No TypeScript compilation needed'
            fi
            
            echo '🔍 Checking current PM2 status...'
            pm2 list || echo 'PM2 not initialized yet'
            
            echo '🚀 Managing server PM2 process...'
            
            # Check if there's a specific server start script
            if grep -q '\"server:' package.json 2>/dev/null; then
              echo '🔍 Found server scripts in package.json'
              
              # Kill existing server process if running
              if pm2 describe tinchat-server > /dev/null 2>&1; then
                echo '🔄 Stopping existing server process...'
                pm2 delete tinchat-server || echo 'Failed to delete existing process'
              fi
              
              # Start new server process
              echo '🆕 Starting new server process...'
              if npm run server:dev >/dev/null 2>&1 &
              then
                echo '✅ Server started with npm run server:dev'
                
                # Try to register with PM2 for monitoring
                pm2 start \"npm run server:dev\" --name \"tinchat-server\" || {
                  echo '⚠️ PM2 registration failed, but server might be running'
                }
              else
                echo '❌ Failed to start server'
                exit 1
              fi
              
            elif [ -f \"server/index.js\" ] || [ -f \"server/index.ts\" ]; then
              echo '🔍 Found server entry point'
              
              if pm2 describe tinchat-server > /dev/null 2>&1; then
                echo '🔄 Restarting existing PM2 server process...'
                pm2 restart tinchat-server
              else
                echo '🆕 Starting new PM2 server process...'
                if [ -f \"server/index.ts\" ]; then
                  pm2 start server/index.ts --name 'tinchat-server' --interpreter tsx
                else
                  pm2 start server/index.js --name 'tinchat-server'
                fi
              fi
            else
              echo '❌ No server entry point found!'
              echo '🔍 Server directory contents:'
              ls -la server/
              exit 1
            fi
            
            echo '💾 Saving PM2 configuration...'
            pm2 save
            
            echo '🔍 Final PM2 status:'
            pm2 list
            
            echo '🔍 Checking PM2 server logs (last 10 lines):'
            pm2 logs tinchat-server --lines 10 --nostream || echo 'No server logs available yet'
            
            echo '🔍 Testing server response...'
            sleep 5  # Give the server time to start
            
            # Test common server ports
            for port in 3001 8080 8000 5000 4000; do
              if curl -f -s http://localhost:\$port > /dev/null; then
                echo '✅ Server is responding on port '\$port
                break
              else
                echo '⚠️ No response on port '\$port
              fi
            done
            
            echo '🔍 Network status (server ports):'
            netstat -tlnp | grep -E ':(3001|8080|8000|5000|4000)' || echo 'No server services found on common ports'
            
            echo '🔍 PM2 server process memory/CPU usage:'
            pm2 show tinchat-server || echo 'Cannot show server PM2 details'
            
            echo '✅ Server deployment completed successfully!'
          "