- name: üöÄ Deploy & Restart on VPS
  env:
    VPS_USER: root
    VPS_HOST: ${{ secrets.VPS_HOST }}
    VPS_PROJECT_PATH: ${{ secrets.VPS_PROJECT_PATH }}
    NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
    NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
    SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
    NEXT_PUBLIC_API_BASE_URL: ${{ secrets.NEXT_PUBLIC_API_BASE_URL }}
  run: |
    echo "üîç Starting deployment process..."
    echo "üìã Environment variables check:"
    echo "  - VPS_HOST: $VPS_HOST"
    echo "  - VPS_PROJECT_PATH: $VPS_PROJECT_PATH"
    echo "  - NEXT_PUBLIC_API_BASE_URL: $NEXT_PUBLIC_API_BASE_URL"
    
    # First-time setup check
    echo "üõ†Ô∏è Checking if project directory exists..."
    ssh root@$VPS_HOST "
      if [ ! -d '$VPS_PROJECT_PATH' ]; then
        echo 'üõ†Ô∏è First-time setup: Creating project directory...'
        mkdir -p '$VPS_PROJECT_PATH'
        echo 'üì• Cloning repository...'
        git clone https://github.com/ekansh28/TinChat.git '$VPS_PROJECT_PATH'
        echo '‚úÖ Repository cloned successfully'
      else
        echo '‚úÖ Project directory already exists'
      fi
    "
    
    # Main deployment
    echo "üöÄ Starting main deployment process..."
    ssh root@$VPS_HOST "
      set -e
      
      echo 'üìÇ Changing to project directory...'
      cd '$VPS_PROJECT_PATH' || { echo '‚ùå Directory missing'; exit 1; }
      echo '‚úÖ Current directory: \$(pwd)'
      
      echo 'üîÑ Force updating repository...'
      git fetch --all
      git reset --hard origin/main
      git clean -fd
      echo '‚úÖ Repository updated successfully'
      
      echo 'üîß Creating .env.local file...'
      cat > .env.local <<'ENV_EOF'
      NEXT_PUBLIC_SUPABASE_URL=$NEXT_PUBLIC_SUPABASE_URL
      NEXT_PUBLIC_SUPABASE_ANON_KEY=$NEXT_PUBLIC_SUPABASE_ANON_KEY
      SUPABASE_SERVICE_ROLE_KEY=$SUPABASE_SERVICE_ROLE_KEY
      NEXT_PUBLIC_API_BASE_URL=$NEXT_PUBLIC_API_BASE_URL
      NODE_ENV=production
      ENV_EOF
      echo '‚úÖ Environment file created'
      echo 'üîç Environment file contents (redacted):'
      sed 's/=.*/=***REDACTED***/g' .env.local
      
      echo 'üì¶ Installing dependencies...'
      npm ci --verbose
      echo '‚úÖ Dependencies installed successfully'
      
      echo 'üèóÔ∏è Building project...'
      npm run build || { 
        echo '‚ùå Build failed - showing last 20 lines of build output:'
        tail -20 npm-debug.log 2>/dev/null || echo 'No npm-debug.log found'
        exit 1
      }
      echo '‚úÖ Build completed successfully'
      
      echo 'üîç Checking current PM2 status...'
      pm2 list || echo 'PM2 not initialized yet'
      
      echo 'üöÄ Managing PM2 process...'
      if pm2 describe tinchat > /dev/null 2>&1; then
        echo 'üîÑ Restarting existing PM2 process...'
        pm2 restart tinchat
      else
        echo 'üÜï Starting new PM2 process...'
        pm2 start npm --name 'tinchat' -- start
      fi
      
      echo 'üíæ Saving PM2 configuration...'
      pm2 save
      
      echo 'üîç Final PM2 status:'
      pm2 list
      
      echo 'üîç Checking PM2 logs (last 10 lines):'
      pm2 logs tinchat --lines 10 --nostream || echo 'No logs available yet'
      
      echo 'üîç Testing application response...'
      sleep 5  # Give the app time to start
      if curl -f -s http://localhost:3000 > /dev/null; then
        echo '‚úÖ Application is responding on port 3000'
      else
        echo '‚ö†Ô∏è Application not responding on port 3000 - this might be normal if it uses a different port'
        echo 'üîç Checking what is listening on common ports:'
        netstat -tlnp | grep -E ':(3000|8080|8000|5000)' || echo 'No services found on common ports'
      fi
      
      echo '‚úÖ Deployment completed successfully!'
    "