name: üöÄ Deploy TinChat Server to EC2

on:
  push:
    branches:
      - main
    paths:
      - 'server/**'
      - '.github/workflows/deploy-server.yml'
      - 'package.json'
      - 'package-lock.json'
  workflow_dispatch: # Allow manual deployment

jobs:
  deploy:
    name: üîß Deploy Server to EC2
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    environment:
      name: production
      url: https://tinchat.online

    steps:
      - name: ‚¨áÔ∏è Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Get full history for proper git operations

      - name: üîê Setup SSH Agent
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SERVER_DEPLOY_KEY }}

      - name: üß† Add VPS Host to Known Hosts
        run: |
          echo "Adding ${{ secrets.SERVER_HOST }} to known hosts..."
          ssh-keyscan -H ${{ secrets.SERVER_HOST }} >> ~/.ssh/known_hosts
          echo "Known hosts updated successfully"

      - name: üîç Pre-deployment Checks
        env:
          SERVER_USER: ${{ secrets.SERVER_USER }}
          SERVER_HOST: ${{ secrets.SERVER_HOST }}
          SERVER_PROJECT_PATH: ${{ secrets.SERVER_PROJECT_PATH }}
        run: |
          echo "üîç Running pre-deployment checks..."
          
          ssh -o StrictHostKeyChecking=no -o ConnectTimeout=30 "$SERVER_USER@$SERVER_HOST" bash -s <<'SCRIPT'
            set -euo pipefail  # Exit on any error, undefined variables, or pipe failures

            SERVER_PROJECT_PATH="${{ secrets.SERVER_PROJECT_PATH }}"

            echo "üìä System Resources:"
            echo "Memory: $(free -h | grep '^Mem:' | awk '{print $3 "/" $2}')"
            echo "Disk: $(df -h / | tail -1 | awk '{print $3 "/" $2}')"
            echo "Load: $(uptime | awk -F'load average:' '{print $2}')"

            echo "üìÇ Checking server directory: $SERVER_PROJECT_PATH"
            if [ ! -d "$SERVER_PROJECT_PATH" ]; then
              echo "‚ùå Project directory does not exist: $SERVER_PROJECT_PATH"
              exit 1
            fi

            cd "$SERVER_PROJECT_PATH"

            echo "üîç Checking git repository status..."
            if [ ! -d .git ]; then
              echo "‚ùå Not a git repository: $(pwd)"
              exit 1
            fi

            echo "üîÑ Checking git remote connection..."
            if ! git ls-remote origin main >/dev/null 2>&1; then
              echo "‚ùå Cannot connect to git remote"
              exit 1
            fi

            echo "üíæ Backing up current state..."
            if [ -f .env ]; then
              cp .env .env.backup.pre-deploy.$(date +%Y%m%d_%H%M%S)
              echo "‚úÖ Environment file backed up"
            fi

            echo "‚úÖ Pre-deployment checks completed successfully"
          SCRIPT

      - name: üöÄ Deploy & Update Server
        env:
          SERVER_USER: ${{ secrets.SERVER_USER }}
          SERVER_HOST: ${{ secrets.SERVER_HOST }}
          SERVER_PROJECT_PATH: ${{ secrets.SERVER_PROJECT_PATH }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          UPSTASH_REDIS_REST_URL: ${{ secrets.UPSTASH_REDIS_REST_URL }}
          UPSTASH_REDIS_REST_TOKEN: ${{ secrets.UPSTASH_REDIS_REST_TOKEN }}
        run: |
          ssh -o StrictHostKeyChecking=no -o ConnectTimeout=30 "$SERVER_USER@$SERVER_HOST" bash -s <<'SCRIPT'
            set -euo pipefail  # Exit on any error

            SERVER_PROJECT_PATH="${{ secrets.SERVER_PROJECT_PATH }}"
            
            echo "üìÇ Changing to server directory: $SERVER_PROJECT_PATH"
            cd "$SERVER_PROJECT_PATH"
            
            # ‚úÖ FIXED: Proper git operations with error handling
            echo "üîÑ Fetching latest changes from GitHub..."
            git fetch origin main || {
              echo "‚ùå Failed to fetch from origin"
              exit 1
            }
            
            echo "üìù Current branch: $(git branch --show-current)"
            echo "üìù Current commit: $(git rev-parse --short HEAD)"
            echo "üìù Latest remote commit: $(git rev-parse --short origin/main)"
            
            # Stash any local changes before pulling
            echo "üîÑ Stashing local changes if any..."
            git stash push -m "Auto-stash before deployment $(date)" || echo "‚ö†Ô∏è Nothing to stash"
            
            # Reset to latest main branch
            echo "üîÑ Updating to latest main branch..."
            git reset --hard origin/main || {
              echo "‚ùå Failed to reset to origin/main"
              exit 1
            }
            
            echo "‚úÖ Repository updated to commit: $(git rev-parse --short HEAD)"
            
            # ‚úÖ FIXED: Better dependency management
            echo "üì¶ Installing/updating dependencies..."
            
            # Clear node_modules if package-lock.json changed
            if git diff --name-only HEAD~1 HEAD | grep -q "package-lock.json\|package.json"; then
              echo "üì¶ Package files changed, clearing node_modules..."
              rm -rf node_modules
            fi
            
            # Install dependencies with proper error handling
            npm ci --only=production --silent || {
              echo "‚ùå Failed to install production dependencies"
              exit 1
            }
            
            npm install --only=dev --silent || {
              echo "‚ùå Failed to install development dependencies"
              exit 1
            }
            
            echo "‚úÖ Dependencies installed successfully"
            
            # ‚úÖ FIXED: Environment configuration with validation
            echo "üîß Updating environment variables..."
            
            # Validate required secrets
            if [ -z "${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}" ]; then
              echo "‚ùå SUPABASE_SERVICE_ROLE_KEY is missing"
              exit 1
            fi
            
            if [ -z "${{ secrets.SUPABASE_URL }}" ]; then
              echo "‚ùå SUPABASE_URL is missing"
              exit 1
            fi
            
            # Create new environment file
            cat > .env <<ENV_FILE
            
            echo "‚úÖ Environment variables updated"
            
            # ‚úÖ FIXED: TypeScript build with proper error handling
            echo "üèóÔ∏è Building TypeScript..."
            
            # Clean previous build
            rm -rf dist
            
            # Build with explicit error handling
            if ! npx tsc --build; then
              echo "‚ùå TypeScript build failed"
              echo "üìã Build logs:"
              npx tsc --build --verbose || true
              exit 1
            fi
            
            # Verify build output
            if [ ! -d "dist" ] || [ ! -f "dist/index.js" ]; then
              echo "‚ùå Build output validation failed"
              echo "üìÇ Dist directory contents:"
              ls -la dist/ || echo "Dist directory does not exist"
              exit 1
            fi
            
            echo "‚úÖ TypeScript build completed successfully"
            
            # ‚úÖ FIXED: PM2 process management with better error handling
            echo "üîÅ Managing PM2 processes..."
            
            # Check if PM2 is installed
            if ! command -v pm2 &> /dev/null; then
              echo "‚ùå PM2 is not installed"
              exit 1
            fi
            
            # Stop existing processes gracefully
            echo "üõë Stopping existing processes..."
            pm2 stop all || echo "‚ö†Ô∏è No processes to stop"
            
            # Start/restart the application
            echo "üöÄ Starting TinChat server..."
            if [ -f "ecosystem.config.js" ]; then
              pm2 start ecosystem.config.js --update-env || {
                echo "‚ùå Failed to start with ecosystem config"
                exit 1
              }
            else
              pm2 start dist/index.js --name "tinchat-server" --update-env || {
                echo "‚ùå Failed to start server directly"
                exit 1
              }
            fi
            
            # Wait for server to start
            echo "‚è≥ Waiting for server to stabilize..."
            sleep 15
            
            # Save PM2 configuration
            pm2 save || echo "‚ö†Ô∏è Failed to save PM2 configuration"
            
            echo "‚úÖ PM2 processes started successfully"
          SCRIPT

      - name: üè• Health Check & Validation
        env:
          SERVER_HOST: ${{ secrets.SERVER_HOST }}
        run: |
          echo "üè• Running comprehensive health checks..."
          
          # Wait for server to fully start
          sleep 10
          
          # Health check with retries
          for i in {1..5}; do
            echo "üîç Health check attempt $i/5..."
            
            if curl -f --max-time 10 "http://13.230.12.126:3001/health"; then
              echo "‚úÖ Main health check passed"
              break
            elif [ $i -eq 5 ]; then
              echo "‚ùå Health check failed after 5 attempts"
              exit 1
            else
              echo "‚è≥ Retrying in 10 seconds..."
              sleep 10
            fi
          done
          
          # Test API endpoints
          echo "üß™ Testing API endpoints..."
          
          if curl -f --max-time 10 "http://13.230.12.126:3001/api/profiles/health"; then
            echo "‚úÖ Profile API health check passed"
          else
            echo "‚ö†Ô∏è Profile API health check failed (non-critical)"
          fi
          
          if curl -f --max-time 10 "http://13.230.12.126:3001/api/friends/health"; then
            echo "‚úÖ Friends API health check passed"
          else
            echo "‚ö†Ô∏è Friends API health check failed (non-critical)"
          fi
          
          echo "‚úÖ Health checks completed"

      - name: üìä Deployment Summary
        env:
          SERVER_USER: ${{ secrets.SERVER_USER }}
          SERVER_HOST: ${{ secrets.SERVER_HOST }}
          SERVER_PROJECT_PATH: ${{ secrets.SERVER_PROJECT_PATH }}
        run: |
          ssh -o StrictHostKeyChecking=no "$SERVER_USER@$SERVER_HOST" bash -s <<'SCRIPT'
            set -e
            
            cd "${{ secrets.SERVER_PROJECT_PATH }}"
            
            echo "üìä Deployment Summary:"
            echo "=================================="
            echo "‚è∞ Time: $(date)"
            echo "üìù Git Commit: $(git rev-parse --short HEAD)"
            echo "üåø Git Branch: $(git branch --show-current)"
            echo "üì¶ Node Version: $(node --version)"
            echo "üì¶ NPM Version: $(npm --version)"
            echo ""
            echo "üöÄ PM2 Status:"
            pm2 status || echo "‚ùå PM2 not responding"
            echo ""
            echo "üíª Server Resources:"
            echo "  Memory: $(free -h | grep '^Mem:' | awk '{print $3 "/" $2}')"
            echo "  Disk: $(df -h / | tail -1 | awk '{print $3 "/" $2}')"
            echo "  Load: $(uptime | awk -F'load average:' '{print $2}')"
            echo "=================================="
          SCRIPT

      - name: üì£ Notify Discord of Success
        if: success()
        env:
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
        run: |
          if [ -n "$DISCORD_WEBHOOK_URL" ]; then
            SHORT_SHA=$(echo ${{ github.sha }} | cut -c1-7)
            COMMIT_MESSAGE=$(git log -1 --pretty=format:"%s" ${{ github.sha }})
            
            curl -H "Content-Type: application/json" -X POST -d "{
              \"username\": \"TinChat Deploy Bot\",
              \"embeds\": [{
                \"title\": \"üöÄ Server Deployed Successfully\",
                \"color\": 3066993,
                \"description\": \"TinChat server has been successfully deployed to EC2!\",
                \"fields\": [
                  { \"name\": \"üìù Commit\", \"value\": \"[\`${SHORT_SHA}\`](https://github.com/${{ github.repository }}/commit/${{ github.sha }})\", \"inline\": true },
                  { \"name\": \"üë§ Deployed by\", \"value\": \"${{ github.actor }}\", \"inline\": true },
                  { \"name\": \"üåê Server\", \"value\": \"[http://13.230.12.126:3001](http://13.230.12.126:3001)\", \"inline\": true },
                  { \"name\": \"üí¨ Commit Message\", \"value\": \"\`\`\`${COMMIT_MESSAGE}\`\`\`\", \"inline\": false },
                  { \"name\": \"üîó Health Checks\", \"value\": \"[Main](http://13.230.12.126:3001/health) ‚Ä¢ [Profile API](http://13.230.12.126:3001/api/profiles/health) ‚Ä¢ [Friends API](http://13.230.12.126:3001/api/friends/health)\", \"inline\": false }
                ],
                \"footer\": { \"text\": \"Production Deployment\" },
                \"timestamp\": \"$(date -u +%Y-%m-%dT%H:%M:%SZ)\"
              }]
            }" "$DISCORD_WEBHOOK_URL"
          fi

      - name: ‚ùå Cleanup on Failure
        if: failure()
        env:
          SERVER_USER: ${{ secrets.SERVER_USER }}
          SERVER_HOST: ${{ secrets.SERVER_HOST }}
          SERVER_PROJECT_PATH: ${{ secrets.SERVER_PROJECT_PATH }}
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
        run: |
          echo "üßπ Deployment failed, attempting cleanup and rollback..."
          
          # Attempt to restart services
          ssh -o StrictHostKeyChecking=no "$SERVER_USER@$SERVER_HOST" bash -s <<'SCRIPT' || true
            set -e
            cd "${{ secrets.SERVER_PROJECT_PATH }}"
            
            echo "üîÑ Attempting to restart PM2 processes..."
            pm2 restart all || pm2 start ecosystem.config.js || echo "‚ùå PM2 restart failed"
            
            echo "üìã Current PM2 status:"
            pm2 status || echo "‚ùå PM2 not responding"
            
            echo "üîç Recent server logs:"
            pm2 logs --lines 20 || echo "‚ùå Could not retrieve logs"
            
            # Restore backup if available
            LATEST_BACKUP=$(ls -t .env.backup.pre-deploy.* 2>/dev/null | head -1 || echo "")
            if [ -n "$LATEST_BACKUP" ]; then
              echo "üîÑ Restoring environment backup: $LATEST_BACKUP"
              cp "$LATEST_BACKUP" .env
            fi
          SCRIPT
          
          # Notify Discord of failure
          if [ -n "$DISCORD_WEBHOOK_URL" ]; then
            SHORT_SHA=$(echo ${{ github.sha }} | cut -c1-7)
            COMMIT_MESSAGE=$(git log -1 --pretty=format:"%s" ${{ github.sha }})
            
            curl -H "Content-Type: application/json" -X POST -d "{
              \"username\": \"TinChat Deploy Bot\",
              \"embeds\": [{
                \"title\": \"üö® Server Deployment Failed\",
                \"color\": 15158332,
                \"description\": \"TinChat server deployment encountered an error.\",
                \"fields\": [
                  { \"name\": \"üìù Commit\", \"value\": \"[\`${SHORT_SHA}\`](https://github.com/${{ github.repository }}/commit/${{ github.sha }})\", \"inline\": true },
                  { \"name\": \"üë§ Triggered by\", \"value\": \"${{ github.actor }}\", \"inline\": true },
                  { \"name\": \"üîç Logs\", \"value\": \"[View Logs](https://github.com/${{ github.repository }}/actions)\", \"inline\": true },
                  { \"name\": \"üí¨ Commit Message\", \"value\": \"\`\`\`${COMMIT_MESSAGE}\`\`\`\", \"inline\": false },
                  { \"name\": \"‚ö†Ô∏è Action Required\", \"value\": \"Check server logs and verify configuration\", \"inline\": false }
                ],
                \"footer\": { \"text\": \"Production Deployment Failed\" },
                \"timestamp\": \"$(date -u +%Y-%m-%dT%H:%M:%SZ)\"
              }]
            }" "$DISCORD_WEBHOOK_URL" || echo "Failed to send Discord notification"
          fi
          
          exit 1  # Ensure the job fails
