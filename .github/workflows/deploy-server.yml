name: üöÄ Deploy Server to VPS

on:
  push:
    branches:
      - main
    paths:
      - 'server/**'
      - '.github/workflows/deploy-server.yml'
  workflow_dispatch:  # Allows manual triggering

jobs:
  deploy:
    name: üîÅ Deploy Server on VPS
    runs-on: ubuntu-latest

    steps:
      - name: ‚¨áÔ∏è Checkout Repository
        uses: actions/checkout@v4

      - name: üîç Verify Environment Variables
        env:
          SERVER_HOST: ${{ secrets.SERVER_HOST }}
          SERVER_PROJECT_PATH: ${{ secrets.SERVER_PROJECT_PATH }}
          SERVER_USER: ${{ secrets.SERVER_USER }}
        run: |
          echo "üîç Checking environment variables for server deployment:"
          
          if [[ -z "$SERVER_HOST" ]]; then
            echo "‚ùå SERVER_HOST is empty or not set!"
            echo "Please set the SERVER_HOST secret in your repository settings."
            exit 1
          fi
          
          if [[ -z "$SERVER_PROJECT_PATH" ]]; then
            echo "‚ùå SERVER_PROJECT_PATH is empty or not set!"
            echo "Please set the SERVER_PROJECT_PATH secret in your repository settings."
            exit 1
          fi
          
          if [[ -z "$SERVER_USER" ]]; then
            echo "‚ùå SERVER_USER is empty or not set!"
            echo "Please set the SERVER_USER secret in your repository settings."
            exit 1
          fi
          
          echo "‚úÖ SERVER_HOST: $SERVER_HOST"
          echo "‚úÖ SERVER_USER: $SERVER_USER"
          echo "‚úÖ SERVER_PROJECT_PATH: $SERVER_PROJECT_PATH"
          echo "‚úÖ Required environment variables are present"

      - name: üîê Setup SSH Agent
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SERVER_DEPLOY_KEY }}

      - name: üß† Add Server Host to Known Hosts
        env:
          SERVER_HOST: ${{ secrets.SERVER_HOST }}
        run: |
          echo "üîç Adding $SERVER_HOST to known hosts..."
          
          # Remove any existing entries for this host
          ssh-keygen -R "$SERVER_HOST" 2>/dev/null || true
          
          # Add the host key
          if ! ssh-keyscan -H "$SERVER_HOST" >> ~/.ssh/known_hosts; then
            echo "‚ùå Failed to scan SSH keys for $SERVER_HOST"
            echo "Please verify that:"
            echo "1. The SERVER_HOST secret is correctly set"
            echo "2. The host is reachable"
            echo "3. SSH service is running on the host"
            exit 1
          fi
          
          echo "‚úÖ Successfully added $SERVER_HOST to known hosts"

      - name: üîç Test SSH Connection
        env:
          SERVER_USER: ${{ secrets.SERVER_USER }}
          SERVER_HOST: ${{ secrets.SERVER_HOST }}
        run: |
          echo "üîç Testing SSH connection to $SERVER_USER@$SERVER_HOST..."
          
          if ssh -o ConnectTimeout=10 -o BatchMode=yes "$SERVER_USER@$SERVER_HOST" 'echo "SSH connection successful"'; then
            echo "‚úÖ SSH connection test passed"
          else
            echo "‚ùå SSH connection test failed"
            echo "Please verify that:"
            echo "1. SERVER_USER and SERVER_HOST secrets are correct"
            echo "2. SERVER_DEPLOY_KEY is the correct private key"
            echo "3. The corresponding public key is in ~/.ssh/authorized_keys on the server"
            echo "4. The server allows SSH connections"
            exit 1
          fi

      - name: üöÄ Deploy Server on VPS
        env:
          SERVER_USER: ${{ secrets.SERVER_USER }}
          SERVER_HOST: ${{ secrets.SERVER_HOST }}
          SERVER_PROJECT_PATH: ${{ secrets.SERVER_PROJECT_PATH }}
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
          NEXT_PUBLIC_API_BASE_URL: ${{ secrets.NEXT_PUBLIC_API_BASE_URL }}
        run: |
          echo "üîç Starting server deployment process..."
          
          # Trim whitespace and newlines from path (safety check)
          CLEAN_PATH=$(echo "$SERVER_PROJECT_PATH" | tr -d '\n' | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')
          echo "üîç Clean project path: $CLEAN_PATH"
          
          # Deploy to server
          ssh "$SERVER_USER@$SERVER_HOST" << 'EOF'
            set -e
            
            # Set up environment variables
            export NEXT_PUBLIC_SUPABASE_URL="${NEXT_PUBLIC_SUPABASE_URL}"
            export NEXT_PUBLIC_SUPABASE_ANON_KEY="${NEXT_PUBLIC_SUPABASE_ANON_KEY}"
            export SUPABASE_SERVICE_ROLE_KEY="${SUPABASE_SERVICE_ROLE_KEY}"
            export NEXT_PUBLIC_API_BASE_URL="${NEXT_PUBLIC_API_BASE_URL}"
            
            echo "üîç Current user: $(whoami)"
            echo "üîç Home directory: $HOME"
            
            # Determine project directory
            if [[ "$CLEAN_PATH" == /home/* ]]; then
              PROJECT_DIR="$HOME/$(basename "$CLEAN_PATH")"
            elif [[ "$CLEAN_PATH" == /* ]]; then
              PROJECT_DIR="$CLEAN_PATH"
            else
              PROJECT_DIR="$HOME/$CLEAN_PATH"
            fi
            
            echo "üîç Target project directory: $PROJECT_DIR"
            
            # Create project directory if it doesn't exist
            if [ ! -d "$PROJECT_DIR" ]; then
              echo "üõ†Ô∏è Creating project directory..."
              mkdir -p "$PROJECT_DIR" || {
                echo "‚ùå Cannot create directory $PROJECT_DIR"
                PROJECT_DIR="$HOME/TinChat"
                echo "üîç Trying fallback directory: $PROJECT_DIR"
                mkdir -p "$PROJECT_DIR" || {
                  echo "‚ùå Cannot create fallback directory"
                  exit 1
                }
              }
              
              echo "üì• Cloning repository..."
              git clone https://github.com/ekansh28/TinChat.git "$PROJECT_DIR" || {
                echo "‚ùå Git clone failed"
                exit 1
              }
            fi
            
            echo "üìÇ Changing to project directory..."
            cd "$PROJECT_DIR" || {
              echo "‚ùå Cannot access project directory"
              exit 1
            }
            
            echo "üîÑ Updating repository..."
            git fetch --all
            git reset --hard origin/main
            git clean -fd
            
            echo "üîß Setting up environment file..."
            cat > .env.local << ENV_EOF
            NEXT_PUBLIC_SUPABASE_URL=$NEXT_PUBLIC_SUPABASE_URL
            NEXT_PUBLIC_SUPABASE_ANON_KEY=$NEXT_PUBLIC_SUPABASE_ANON_KEY
            SUPABASE_SERVICE_ROLE_KEY=$SUPABASE_SERVICE_ROLE_KEY
            NEXT_PUBLIC_API_BASE_URL=$NEXT_PUBLIC_API_BASE_URL
            NODE_ENV=production
            ENV_EOF
            chmod 600 .env.local          
            echo "‚úÖ Environment file created"
            
            # Check for server directory
            if [ ! -d "server" ]; then
              echo "‚ùå Server directory not found!"
              ls -la
              exit 1
            fi
            
            echo "üì¶ Installing dependencies..."
            
            # Install server dependencies
            if [ -f "server/package.json" ]; then
              cd server
              rm -rf node_modules package-lock.json
              npm install --production --no-audit --no-fund || {
                echo "‚ùå Server dependency installation failed"
                exit 1
              }
              cd ..
            else
              rm -rf node_modules package-lock.json
              npm install --production --no-audit --no-fund || {
                echo "‚ùå Root dependency installation failed"
                exit 1
              }
            fi
            
            echo "üöÄ Managing PM2 process..."
            
            # Install PM2 if not available
            if ! command -v pm2 &> /dev/null; then
              echo "üì¶ Installing PM2..."
              npm install -g pm2
            fi
            
            # Stop existing process
            pm2 delete tinchat-server 2>/dev/null || echo "No existing process to delete"
            
            # Start server
            if [ -f "server/index.js" ]; then
              pm2 start server/index.js --name "tinchat-server"
            elif [ -f "server/index.ts" ]; then
              pm2 start server/index.ts --name "tinchat-server" --interpreter tsx
            elif grep -q '"server:' package.json 2>/dev/null; then
              pm2 start "npm run server:start" --name "tinchat-server"
            else
              echo "‚ùå No server entry point found"
              exit 1
            fi
            
            pm2 save
            
            echo "üîç PM2 Status:"
            pm2 list
            
            echo "‚úÖ Server deployment completed!"
            EOF
            
            echo "‚úÖ Deployment script completed successfully!"