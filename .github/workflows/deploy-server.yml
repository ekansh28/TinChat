name: 🚀 Deploy Server to VPS

on:
  push:
    branches:
      - main
    paths:
      - 'server/**'
      - '.github/workflows/deploy-server.yml'
  workflow_dispatch:  # Allows manual triggering

jobs:
  deploy:
    name: 🔁 Deploy Server on VPS
    runs-on: ubuntu-latest

    steps:
      - name: ⬇️ Checkout Repository
        uses: actions/checkout@v3

      - name: 🔐 Setup SSH Agent
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.VPS_DEPLOY_KEY }}

      - name: 🧠 Add VPS Host to Known Hosts
        run: ssh-keyscan -H ${{ secrets.VPS_HOST }} >> ~/.ssh/known_hosts

      - name: 🔍 Verify Environment Variables
        env:
          VPS_HOST: ${{ secrets.VPS_HOST }}
          VPS_PROJECT_PATH: ${{ secrets.VPS_PROJECT_PATH }}
        run: |
          echo "🔍 Checking environment variables for server deployment:"
          echo "  - VPS_HOST length: ${#VPS_HOST}"
          echo "  - VPS_PROJECT_PATH length: ${#VPS_PROJECT_PATH}"
          
          if [[ -z "$VPS_HOST" ]]; then
            echo "❌ VPS_HOST is empty!"
            exit 1
          fi
          
          if [[ -z "$VPS_PROJECT_PATH" ]]; then
            echo "❌ VPS_PROJECT_PATH is empty!"
            exit 1
          fi
          
          echo "✅ Required environment variables are present"

      - name: 🚀 Deploy Server on VPS
        env:
          VPS_USER: root
          VPS_HOST: ${{ secrets.VPS_HOST }}
          VPS_PROJECT_PATH: ${{ secrets.VPS_PROJECT_PATH }}
        run: |
          echo "🔍 Starting server deployment process..."
          echo "📋 Environment variables check:"
          echo "  - VPS_HOST: $VPS_HOST"
          echo "  - VPS_PROJECT_PATH: $VPS_PROJECT_PATH"
          
          # Trim whitespace and newlines from path (safety check)
          CLEAN_PATH=$(echo "$VPS_PROJECT_PATH" | tr -d '\n' | sed 's/ *$//')
          echo "  - CLEAN_PATH: $CLEAN_PATH"
          
          # First-time setup check
          echo "🛠️ Checking if project directory exists..."
          ssh $VPS_USER@$VPS_HOST "
            if [ ! -d '$CLEAN_PATH' ]; then
              echo '🛠️ First-time setup: Creating project directory...'
              mkdir -p '$CLEAN_PATH'
              echo '📥 Cloning repository...'
              git clone https://github.com/ekansh28/TinChat.git '$CLEAN_PATH'
              echo '✅ Repository cloned successfully'
            else
              echo '✅ Project directory already exists'
            fi
          "
          
          # Main server deployment
          echo "🚀 Starting main server deployment process..."
          ssh $VPS_USER@$VPS_HOST "
            set -e
            
            echo '📂 Changing to project directory...'
            cd '$CLEAN_PATH' || { echo '❌ Directory missing'; exit 1; }
            echo '✅ Current directory: \$(pwd)'
            
            echo '🔄 Force updating repository...'
            git fetch --all
            git reset --hard origin/main
            git clean -fd
            echo '✅ Repository updated successfully'
            
            echo '🔍 Checking server directory...'
            if [ -d \"server\" ]; then
              echo '✅ Server directory found'
              ls -la server/
            else
              echo '❌ Server directory not found!'
              echo '🔍 Available directories:'
              ls -la
              exit 1
            fi
            
            echo '📦 Installing server dependencies...'
            
            # Check if server has its own package.json
            if [ -f \"server/package.json\" ]; then
              echo '📦 Installing server-specific dependencies...'
              cd server
              
              # Clean install for server
              rm -rf node_modules package-lock.json
              npm cache clean --force 2>/dev/null || true
              
              npm install --no-audit --no-fund || {
                echo '❌ Server npm install failed, trying alternatives...'
                npm install --legacy-peer-deps --no-audit --no-fund || {
                  echo '❌ Server dependency installation failed'
                  echo '🔍 Node and npm versions:'
                  node --version
                  npm --version
                  echo '🔍 Server package.json:'
                  cat package.json | head -20
                  exit 1
                }
              }
              
              echo '✅ Server dependencies installed'
              cd ..
            else
              echo '📦 Installing root project dependencies for server...'
              
              # Clean install for root project
              rm -rf node_modules package-lock.json
              npm cache clean --force 2>/dev/null || true
              
              npm install --no-audit --no-fund || {
                echo '❌ Root npm install failed, trying alternatives...'
                npm install --legacy-peer-deps --no-audit --no-fund || {
                  echo '❌ Root dependency installation failed'
                  exit 1
                }
              }
              
              echo '✅ Root dependencies installed'
            fi
            
            echo '🔍 Checking for TypeScript compilation...'
            if [ -f \"server/tsconfig.json\" ] || grep -q '\"tsx\"' package.json 2>/dev/null; then
              echo '🔧 TypeScript detected, checking if compilation is needed...'
              if [ -f \"server/dist\" ] || npm run --silent server:build >/dev/null 2>&1; then
                echo '✅ TypeScript compilation successful or not needed'
              else
                echo '⚠️ TypeScript compilation skipped or failed, continuing...'
              fi
            else
              echo '✅ No TypeScript compilation needed'
            fi
            
            echo '🔍 Checking current PM2 status...'
            pm2 list || echo 'PM2 not initialized yet'
            
            echo '🚀 Managing server PM2 process...'
            
            # Check if there's a specific server start script
            if grep -q '\"server:' package.json 2>/dev/null; then
              echo '🔍 Found server scripts in package.json'
              
              # Kill existing server process if running
              if pm2 describe tinchat-server > /dev/null 2>&1; then
                echo '🔄 Stopping existing server process...'
                pm2 delete tinchat-server || echo 'Failed to delete existing process'
              fi
              
              # Start new server process
              echo '🆕 Starting new server process...'
              if npm run server:dev >/dev/null 2>&1 &
              then
                echo '✅ Server started with npm run server:dev'
                
                # Try to register with PM2 for monitoring
                pm2 start \"npm run server:dev\" --name \"tinchat-server\" || {
                  echo '⚠️ PM2 registration failed, but server might be running'
                }
              else
                echo '❌ Failed to start server'
                exit 1
              fi
              
            elif [ -f \"server/index.js\" ] || [ -f \"server/index.ts\" ]; then
              echo '🔍 Found server entry point'
              
              if pm2 describe tinchat-server > /dev/null 2>&1; then
                echo '🔄 Restarting existing PM2 server process...'
                pm2 restart tinchat-server
              else
                echo '🆕 Starting new PM2 server process...'
                if [ -f \"server/index.ts\" ]; then
                  pm2 start server/index.ts --name 'tinchat-server' --interpreter tsx
                else
                  pm2 start server/index.js --name 'tinchat-server'
                fi
              fi
            else
              echo '❌ No server entry point found!'
              echo '🔍 Server directory contents:'
              ls -la server/
              exit 1
            fi
            
            echo '💾 Saving PM2 configuration...'
            pm2 save
            
            echo '🔍 Final PM2 status:'
            pm2 list
            
            echo '🔍 Checking PM2 server logs (last 10 lines):'
            pm2 logs tinchat-server --lines 10 --nostream || echo 'No server logs available yet'
            
            echo '🔍 Testing server response...'
            sleep 5  # Give the server time to start
            
            # Test common server ports
            for port in 3001 8080 8000 5000 4000; do
              if curl -f -s http://localhost:\$port > /dev/null; then
                echo '✅ Server is responding on port '\$port
                break
              else
                echo '⚠️ No response on port '\$port
              fi
            done
            
            echo '🔍 Network status (server ports):'
            netstat -tlnp | grep -E ':(3001|8080|8000|5000|4000)' || echo 'No server services found on common ports'
            
            echo '🔍 PM2 server process memory/CPU usage:'
            pm2 show tinchat-server || echo 'Cannot show server PM2 details'
            
            echo '✅ Server deployment completed successfully!'
          "