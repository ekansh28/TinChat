name: üöÄ Deploy to Contabo VPS

on:
  push:
    branches:
      - main

jobs:
  deploy:
    name: üîÅ Build & Deploy on Contabo VPS
    runs-on: ubuntu-latest

    steps:
      - name: ‚¨áÔ∏è Checkout Repository
        uses: actions/checkout@v3

      - name: üîê Setup SSH Agent
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.VPS_DEPLOY_KEY }}

      - name: üß† Add VPS Host to Known Hosts
        run: ssh-keyscan -H ${{ secrets.VPS_HOST }} >> ~/.ssh/known_hosts

      - name: üöÄ Deploy & Restart on VPS
        env:
          VPS_USER: ${{ secrets.VPS_USER }}
          VPS_HOST: ${{ secrets.VPS_HOST }}
          VPS_PROJECT_PATH: ${{ secrets.VPS_PROJECT_PATH }}
          # Add all your environment variables here
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
          NEXT_PUBLIC_API_BASE_URL: ${{ secrets.NEXT_PUBLIC_API_BASE_URL }}
          # Add any other environment variables your app needs
        run: |
          ssh $VPS_USER@$VPS_HOST bash -s <<'SCRIPT'
            set -e
            echo "üìÇ Changing to project directory: ${{ secrets.VPS_PROJECT_PATH }}"
            cd "${{ secrets.VPS_PROJECT_PATH }}"
            
            # ‚úÖ FORCE PULL: Remove any local changes and pull latest from GitHub
            echo "üîÑ Fetching latest changes from GitHub..."
            git fetch origin main || {
              echo "‚ùå Failed to fetch from origin"
              exit 1
            }
            
            echo "üìù Current branch: $(git branch --show-current)"
            echo "üìù Current local commit: $(git rev-parse --short HEAD 2>/dev/null || echo 'unknown')"
            echo "üìù Latest remote commit: $(git rev-parse --short origin/main)"
            
            # Check if there are any uncommitted changes and discard them
            if ! git diff-index --quiet HEAD -- 2>/dev/null; then
              echo "‚ö†Ô∏è Found uncommitted changes on VPS, discarding them..."
              git reset --hard HEAD
            fi
            
            # Check if there are any untracked files and remove them
            if [ -n "$(git status --porcelain 2>/dev/null)" ]; then
              echo "‚ö†Ô∏è Found untracked files on VPS, cleaning them..."
              git clean -fd
            fi
            
            # Force reset to latest main branch (this will discard any local changes)
            echo "üîÑ Force updating to latest main branch..."
            git reset --hard origin/main || {
              echo "‚ùå Failed to reset to origin/main"
              exit 1
            }
            
            echo "‚úÖ Repository forcefully updated to commit: $(git rev-parse --short HEAD)"
            
            echo "üîß Creating environment file from GitHub secrets..."
            cat > .env.local <<'ENV_FILE'
NEXT_PUBLIC_SUPABASE_URL=${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
NEXT_PUBLIC_SUPABASE_ANON_KEY=${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
SUPABASE_SERVICE_ROLE_KEY=${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
NEXT_PUBLIC_API_BASE_URL=${{ secrets.NEXT_PUBLIC_API_BASE_URL }}
NODE_ENV=production
ENV_FILE
            
            echo "‚úÖ Environment variables set from GitHub secrets"
            
            echo "üì¶ Installing dependencies..."
            # Clear node_modules if package files changed or don't exist
            if git diff --name-only HEAD~1 HEAD 2>/dev/null | grep -q "package-lock.json\|package.json" || [ ! -d "node_modules" ]; then
              echo "üì¶ Package files changed or node_modules missing, reinstalling..."
              rm -rf node_modules package-lock.json
              npm install || {
                echo "‚ùå Failed to install dependencies"
                exit 1
              }
            else
              echo "üì¶ No package changes detected, keeping existing dependencies"
            fi
            
            echo "üèóÔ∏è Building the project..."
            npm run build || {
              echo "‚ùå Build failed"
              exit 1
            }
            
            echo "üîÅ Restarting PM2 process..."
            pm2 restart tinchat || pm2 start npm --name "tinchat" -- start || {
              echo "‚ùå Failed to start/restart PM2 process"
              exit 1
            }
            
            echo "‚úÖ Deployment completed successfully"
          SCRIPT

      # ... rest of your notification steps ...