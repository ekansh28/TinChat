name: üöÄ Deploy to Contabo VPS

on:
  push:
    branches:
      - main

jobs:
  deploy:
    name: üîÅ Build & Deploy on Contabo VPS
    runs-on: ubuntu-latest

    steps:
      - name: ‚¨áÔ∏è Checkout Repository
        uses: actions/checkout@v3

      - name: üîê Setup SSH Agent
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.VPS_DEPLOY_KEY }}

      - name: üß† Add VPS Host to Known Hosts
        run: ssh-keyscan -H ${{ secrets.VPS_HOST }} >> ~/.ssh/known_hosts

      - name: üöÄ Deploy & Restart on VPS
        env:
          VPS_USER: root
          VPS_HOST: ${{ secrets.VPS_HOST }}
          VPS_PROJECT_PATH: ${{ secrets.VPS_PROJECT_PATH }}
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
          NEXT_PUBLIC_API_BASE_URL: ${{ secrets.NEXT_PUBLIC_API_BASE_URL }}
        run: |
          echo "üîç Starting deployment process..."
          echo "üìã Environment variables check:"
          echo "  - VPS_HOST: $VPS_HOST"
          echo "  - VPS_PROJECT_PATH: $VPS_PROJECT_PATH"
          echo "  - NEXT_PUBLIC_API_BASE_URL: $NEXT_PUBLIC_API_BASE_URL"
          
          # Trim whitespace and newlines from path (safety check)
          CLEAN_PATH=$(echo "$VPS_PROJECT_PATH" | tr -d '\n' | sed 's/ *$//')
          echo "  - CLEAN_PATH: $CLEAN_PATH"
          
          ssh $VPS_USER@$VPS_HOST "
            set -e
            
            echo 'üìÇ Changing to project directory: $CLEAN_PATH'
            cd '$CLEAN_PATH' || { 
              echo '‚ùå Failed to change directory to $CLEAN_PATH'
              echo 'üîç Available directories in parent:'
              ls -la \$(dirname '$CLEAN_PATH') 2>/dev/null || echo 'Cannot list parent directory'
              exit 1
            }
            echo '‚úÖ Current directory: \$(pwd)'
            
            echo 'üîç Git status before update:'
            git status --porcelain || echo 'Git status failed'
            git log --oneline -3 || echo 'Git log failed'
            
            echo 'üîÑ Fetching latest changes from GitHub...'
            git fetch origin main
            git reset --hard origin/main
            git clean -fd
            echo '‚úÖ Repository updated successfully'
            
            echo 'üîç Git status after update:'
            git log --oneline -3 || echo 'Git log failed'
            
            echo 'üîß Creating .env.local file...'
            
            # Create .env.local file with explicit echo statements to handle empty variables
            echo \"NEXT_PUBLIC_SUPABASE_URL=\${NEXT_PUBLIC_SUPABASE_URL}\" > .env.local
            echo \"NEXT_PUBLIC_SUPABASE_ANON_KEY=\${NEXT_PUBLIC_SUPABASE_ANON_KEY}\" >> .env.local
            echo \"SUPABASE_SERVICE_ROLE_KEY=\${SUPABASE_SERVICE_ROLE_KEY}\" >> .env.local
            echo \"NEXT_PUBLIC_API_BASE_URL=\${NEXT_PUBLIC_API_BASE_URL}\" >> .env.local
            echo \"NODE_ENV=production\" >> .env.local
            echo '‚úÖ Environment file created'
            echo 'üîç Environment file contents (redacted):'
            sed 's/=.*/=***REDACTED***/g' .env.local
            
            echo 'üîç Checking Next.js configuration...'
            if [ -f \"next.config.ts\" ]; then
              echo 'üìÑ Found next.config.ts'
            elif [ -f \"next.config.js\" ]; then
              echo 'üìÑ Found next.config.js'
            else
              echo '‚ö†Ô∏è No next.config found - creating basic next.config.js...'
              echo '/** @type {import(\"next\").NextConfig} */' > next.config.js
              echo 'const nextConfig = {' >> next.config.js
              echo '  eslint: { ignoreDuringBuilds: true },' >> next.config.js
              echo '  typescript: { ignoreBuildErrors: true },' >> next.config.js
              echo '}' >> next.config.js
              echo 'module.exports = nextConfig' >> next.config.js
              echo '‚úÖ Created basic next.config.js'
            fi

            echo 'üì¶ Checking dependencies...'
            
            # Force clean install if node_modules is corrupted or next is missing
            if [ ! -d 'node_modules' ] || ! npm list next >/dev/null 2>&1 || git diff --name-only HEAD~1 HEAD | grep -q 'package.json\|package-lock.json'; then
              echo 'üîÑ Installing dependencies...'
              
              # Clean installation
              rm -rf node_modules package-lock.json
              npm cache clean --force
              
              npm install || {
                echo '‚ùå npm install failed'
                echo 'üîç Trying with legacy peer deps...'
                npm install --legacy-peer-deps || {
                  echo '‚ùå npm install failed again - showing npm logs:'
                  cat ~/.npm/_logs/*.log 2>/dev/null | tail -50 || echo 'No npm logs found'
                  exit 1
                }
              }
            else
              echo '‚úÖ Dependencies are up to date'
            fi
            
            # Verify next is available
            if ! npm list next >/dev/null 2>&1; then
              echo '‚ùå Next.js not found in dependencies, forcing reinstall...'
              npm install next react react-dom --save
            fi
            
            echo 'üîç Verifying Next.js installation:'
            npx next --version || {
              echo '‚ùå Next.js still not working, checking package.json:'
              grep -A 10 -B 5 '"next"' package.json || echo 'Next.js not in package.json'
              exit 1
            }

            echo 'üèóÔ∏è Building the project...'
            
            # Check if this is a Next.js app with static export
            if grep -q '"output".*"export"' next.config.* 2>/dev/null || grep -q 'output:.*export' next.config.* 2>/dev/null; then
              echo 'üîç Detected Next.js static export configuration'
            fi
            
            # Clear any existing build artifacts
            echo 'üßπ Cleaning previous build...'
            rm -rf .next out
            
            # Check for TypeScript errors first (optional)
            if npm run typecheck >/dev/null 2>&1; then
              echo '‚úÖ TypeScript check passed'
            else
              echo '‚ö†Ô∏è TypeScript errors found, but continuing with build...'
            fi
            
            # Attempt the build using npx to ensure next is found
            echo 'üî® Starting build process...'
            if npx next build; then
              echo '‚úÖ Build successful with npx next build'
            elif npm run build; then
              echo '‚úÖ Build successful with npm run build'
            else
              echo '‚ùå Build failed - detailed diagnostics:'
              
              echo 'üîç Next.js configuration:'
              ls -la next.config.* 2>/dev/null || echo 'No next.config found'
              
              echo 'üîç Package.json scripts:'
              grep -A 10 '\"scripts\"' package.json 2>/dev/null || echo 'Cannot read scripts'
              
              echo 'üîç Next.js dependency:'
              npm list next 2>/dev/null || echo 'Next.js not installed'
              
              echo 'üîç Node modules binaries:'
              ls -la node_modules/.bin/ | grep next || echo 'No next commands found'
              
              echo 'üîç Environment variables:'
              env | grep -E '^(NEXT_|NODE_)' || echo 'No relevant env vars'
              
              exit 1
            fi
            echo '‚úÖ Build completed successfully'
            
            echo 'üîç Build artifacts:'
            ls -la .next/ 2>/dev/null || echo 'No .next directory found'

            echo 'üîç Current PM2 status before restart:'
            pm2 list || echo 'PM2 not initialized yet'

            echo 'üîÅ Restarting app via PM2...'
            if pm2 describe tinchat > /dev/null 2>&1; then
              echo 'üîÑ Restarting existing PM2 process...'
              pm2 restart tinchat
            else
              echo 'üÜï Starting new PM2 process...'
              pm2 start npm --name 'tinchat' -- start
            fi
            
            echo 'üíæ Saving PM2 configuration...'
            pm2 save

            echo 'üîç Final PM2 status:'
            pm2 list
            
            echo 'üîç PM2 process details:'
            pm2 describe tinchat || echo 'Cannot describe tinchat process'
            
            echo 'üîç Recent PM2 logs (last 15 lines):'
            pm2 logs tinchat --lines 15 --nostream || echo 'No logs available yet'
            
            echo 'üîç Testing application response...'
            sleep 5  # Give the app time to start
            
            # Test multiple ports
            for port in 3000 8080 8000 5000; do
              if curl -f -s http://localhost:\$port > /dev/null; then
                echo '‚úÖ Application is responding on port '\$port
                break
              else
                echo '‚ö†Ô∏è No response on port '\$port
              fi
            done
            
            echo 'üîç Network status:'
            netstat -tlnp | grep -E ':(3000|8080|8000|5000)' || echo 'No services found on common ports'
            
            echo 'üîç PM2 process memory/CPU usage:'
            pm2 monit --no-interaction || echo 'Cannot show PM2 monitoring'

            echo '‚úÖ Deployment completed successfully!'
          "