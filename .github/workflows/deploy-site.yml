name: üöÄ Deploy Site to VPS

on:
  push:
    branches:
      - main
    paths-ignore:
      - 'server/**'
      - '.github/workflows/deploy-server.yml'

jobs:
  deploy:
    name: üîÅ Build & Deploy Site on VPS
    runs-on: ubuntu-latest

    steps:
      - name: ‚¨áÔ∏è Checkout Repository
        uses: actions/checkout@v3

      - name: üîê Setup SSH Agent
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.VPS_DEPLOY_KEY }}

      - name: üß† Add VPS Host to Known Hosts
        run: ssh-keyscan -H ${{ secrets.VPS_HOST }} >> ~/.ssh/known_hosts

      - name: üîç Verify Environment Variables
        env:
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
          NEXT_PUBLIC_API_BASE_URL: ${{ secrets.NEXT_PUBLIC_API_BASE_URL }}
        run: |
          echo "üîç Checking environment variables in GitHub Actions runner:"
          echo "  - NEXT_PUBLIC_SUPABASE_URL length: ${#NEXT_PUBLIC_SUPABASE_URL}"
          echo "  - NEXT_PUBLIC_SUPABASE_ANON_KEY length: ${#NEXT_PUBLIC_SUPABASE_ANON_KEY}"
          echo "  - SUPABASE_SERVICE_ROLE_KEY length: ${#SUPABASE_SERVICE_ROLE_KEY}"
          echo "  - NEXT_PUBLIC_API_BASE_URL length: ${#NEXT_PUBLIC_API_BASE_URL}"
          
          if [[ -z "$NEXT_PUBLIC_SUPABASE_URL" ]]; then
            echo "‚ùå NEXT_PUBLIC_SUPABASE_URL is empty!"
            exit 1
          fi
          
          if [[ -z "$NEXT_PUBLIC_SUPABASE_ANON_KEY" ]]; then
            echo "‚ùå NEXT_PUBLIC_SUPABASE_ANON_KEY is empty!"
            exit 1
          fi
          
          echo "‚úÖ Required environment variables are present"

      - name: üöÄ Deploy & Restart on VPS
        env:
          VPS_USER: root
          VPS_HOST: ${{ secrets.VPS_HOST }}
          VPS_PROJECT_PATH: ${{ secrets.VPS_PROJECT_PATH }}
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
          NEXT_PUBLIC_API_BASE_URL: ${{ secrets.NEXT_PUBLIC_API_BASE_URL }}
        run: |
          echo "üîç Starting deployment process..."
          echo "üìã Environment variables check:"
          echo "  - VPS_HOST: $VPS_HOST"
          echo "  - VPS_PROJECT_PATH: $VPS_PROJECT_PATH"  
          echo "  - NEXT_PUBLIC_API_BASE_URL: $NEXT_PUBLIC_API_BASE_URL"
          echo "  - SUPABASE_URL length: ${#NEXT_PUBLIC_SUPABASE_URL}"
          echo "  - SUPABASE_ANON_KEY length: ${#NEXT_PUBLIC_SUPABASE_ANON_KEY}"
          
          # Trim whitespace and newlines from path (safety check)
          CLEAN_PATH=$(echo "$VPS_PROJECT_PATH" | tr -d '\n' | sed 's/ *$//')
          echo "  - CLEAN_PATH: $CLEAN_PATH"
          
          # Pass environment variables to SSH session
          ssh $VPS_USER@$VPS_HOST "
            export NEXT_PUBLIC_SUPABASE_URL='$NEXT_PUBLIC_SUPABASE_URL'
            export NEXT_PUBLIC_SUPABASE_ANON_KEY='$NEXT_PUBLIC_SUPABASE_ANON_KEY'
            export SUPABASE_SERVICE_ROLE_KEY='$SUPABASE_SERVICE_ROLE_KEY'
            export NEXT_PUBLIC_API_BASE_URL='$NEXT_PUBLIC_API_BASE_URL'
            
            set -e
            
            echo 'üìÇ Changing to project directory...'
            cd '$CLEAN_PATH' || { echo '‚ùå Directory missing'; exit 1; }
            echo '‚úÖ Current directory: \$(pwd)'
            
            echo 'üîÑ Force updating repository...'
            git fetch --all
            git reset --hard origin/main
            git clean -fd
            echo '‚úÖ Repository updated successfully'
            
            echo 'üîß Creating .env.local file...'
            
            # Debug: Show what variables we have (safely)
            echo 'üîç Environment variables available in SSH session:'
            echo \"  NEXT_PUBLIC_SUPABASE_URL length: \${#NEXT_PUBLIC_SUPABASE_URL}\"
            echo \"  NEXT_PUBLIC_SUPABASE_ANON_KEY length: \${#NEXT_PUBLIC_SUPABASE_ANON_KEY}\"
            echo \"  SUPABASE_SERVICE_ROLE_KEY length: \${#SUPABASE_SERVICE_ROLE_KEY}\"
            echo \"  NEXT_PUBLIC_API_BASE_URL length: \${#NEXT_PUBLIC_API_BASE_URL}\"
            
            # Create .env.local file using the exported variables
            cat > .env.local << 'ENVEOF'
            NEXT_PUBLIC_SUPABASE_URL=\${NEXT_PUBLIC_SUPABASE_URL}
            NEXT_PUBLIC_SUPABASE_ANON_KEY=\${NEXT_PUBLIC_SUPABASE_ANON_KEY}
            SUPABASE_SERVICE_ROLE_KEY=\${SUPABASE_SERVICE_ROLE_KEY}
            NEXT_PUBLIC_API_BASE_URL=\${NEXT_PUBLIC_API_BASE_URL}
            NODE_ENV=production
            ENVEOF
            
            # Substitute the actual values
            sed -i \"s|\\\${NEXT_PUBLIC_SUPABASE_URL}|\$NEXT_PUBLIC_SUPABASE_URL|g\" .env.local
            sed -i \"s|\\\${NEXT_PUBLIC_SUPABASE_ANON_KEY}|\$NEXT_PUBLIC_SUPABASE_ANON_KEY|g\" .env.local
            sed -i \"s|\\\${SUPABASE_SERVICE_ROLE_KEY}|\$SUPABASE_SERVICE_ROLE_KEY|g\" .env.local
            sed -i \"s|\\\${NEXT_PUBLIC_API_BASE_URL}|\$NEXT_PUBLIC_API_BASE_URL|g\" .env.local
            
            echo '‚úÖ Environment file created'
            echo 'üîç Environment file verification:'
            echo \"File exists: \$(test -f .env.local && echo 'YES' || echo 'NO')\"
            echo \"File size: \$(wc -c < .env.local 2>/dev/null || echo 'unknown') bytes\"
            echo 'üîç Final environment file check (with variable lengths):'
            while IFS='=' read -r key value; do
              if [[ ! -z \"\$key\" && \"\$key\" != \"#\"* ]]; then
                echo \"  \$key: length \${#value}\"
              fi
            done < .env.local
            
            echo 'üîç Checking Next.js configuration...'
            if [ -f \"next.config.ts\" ]; then
              echo 'üìÑ Found next.config.ts'
            elif [ -f \"next.config.js\" ]; then
              echo 'üìÑ Found next.config.js'
            else
              echo '‚ö†Ô∏è No next.config found - creating basic next.config.js...'
              echo '/** @type {import(\"next\").NextConfig} */' > next.config.js
              echo 'const nextConfig = {' >> next.config.js
              echo '  eslint: { ignoreDuringBuilds: true },' >> next.config.js
              echo '  typescript: { ignoreBuildErrors: true },' >> next.config.js
              echo '}' >> next.config.js
              echo 'module.exports = nextConfig' >> next.config.js
              echo '‚úÖ Created basic next.config.js'
            fi
            
            echo 'üì¶ Checking dependencies...'
            
            # Check if package.json exists
            if [ ! -f \"package.json\" ]; then
              echo '‚ùå package.json not found!'
              exit 1
            fi
            
            # Always do a fresh install to ensure next is properly installed
            echo 'üîÑ Installing dependencies (fresh install)...'
            
            # Clean slate approach
            rm -rf node_modules package-lock.json .next
            npm cache clean --force 2>/dev/null || true
            
            # Install with specific flags for better compatibility
            npm install --no-audit --no-fund || {
              echo '‚ùå npm install failed, trying alternative approaches...'
              
              # Try with legacy peer deps
              npm install --legacy-peer-deps --no-audit --no-fund || {
                echo '‚ùå Install with legacy-peer-deps failed'
                
                # Try installing just the essential packages first
                echo 'üîß Trying to install core packages first...'
                npm install next@15.2.3 react@18.3.1 react-dom@18.3.1 --no-audit --no-fund || {
                  echo '‚ùå Failed to install core packages'
                  echo 'üîç Node and npm versions:'
                  node --version
                  npm --version
                  echo 'üîç Disk space:'
                  df -h .
                  exit 1
                }
                
                # Then install the rest
                echo 'üîß Installing remaining dependencies...'
                npm install --no-audit --no-fund || echo 'Some optional dependencies may have failed'
              }
            }
            
            # Verify Next.js installation
            echo 'üîç Verifying Next.js installation:'
            if [ -f \"node_modules/.bin/next\" ]; then
              echo '‚úÖ Next.js binary found'
              ./node_modules/.bin/next --version || echo 'Next version check failed'
            else
              echo '‚ùå Next.js binary not found after installation'
              ls -la node_modules/.bin/ | head -5
              exit 1
            fi
            
            echo 'üèóÔ∏è Building the project...'
            
            # Check if this is a Next.js app with static export
            if grep -q '\"output\".*\"export\"' next.config.* 2>/dev/null || grep -q 'output:.*export' next.config.* 2>/dev/null; then
              echo 'üîç Detected Next.js static export configuration'
            fi
            
            # Clear any existing build artifacts
            echo 'üßπ Cleaning previous build...'
            rm -rf .next out
            
            # Check for TypeScript errors first (optional)
            if npm run typecheck >/dev/null 2>&1; then
              echo '‚úÖ TypeScript check passed'
            else
              echo '‚ö†Ô∏è TypeScript errors found, but continuing with build...'
            fi
            
            # Attempt the build using direct path to next
            echo 'üî® Starting build process...'
            if [ -f \"node_modules/.bin/next\" ]; then
              echo 'üî® Building with direct next path...'
              ./node_modules/.bin/next build || {
                echo '‚ùå Direct next build failed'
                echo 'üîç Last build attempt diagnostics:'
                echo '  Next.js config:'
                ls -la next.config.* 2>/dev/null || echo 'No config found'
                echo '  Environment file check:'
                cat .env.local | sed 's/=.*/=***/' || echo 'No .env.local'
                echo '  Node modules:'
                ls -la node_modules/.bin/ | grep next || echo 'No next binary'
                exit 1
              }
            elif npm run build; then
              echo '‚úÖ Build successful with npm run build'
            else
              echo '‚ùå All build methods failed'
              exit 1
            fi
            echo '‚úÖ Build completed successfully'
            
            echo 'üîç Build artifacts:'
            ls -la .next/ 2>/dev/null || echo 'No .next directory found'
            
            echo 'üîç Current PM2 status before restart:'
            pm2 list || echo 'PM2 not initialized yet'
            
            echo 'üîÅ Restarting app via PM2...'
            if pm2 describe tinchat > /dev/null 2>&1; then
              echo 'üîÑ Restarting existing PM2 process...'
              pm2 restart tinchat
            else
              echo 'üÜï Starting new PM2 process...'
              pm2 start npm --name 'tinchat' -- start
            fi
            
            echo 'üíæ Saving PM2 configuration...'
            pm2 save
            
            echo 'üîç Final PM2 status:'
            pm2 list
            
            echo 'üîç PM2 process details:'
            pm2 describe tinchat || echo 'Cannot describe tinchat process'
            
            echo 'üîç Recent PM2 logs (last 15 lines):'
            pm2 logs tinchat --lines 15 --nostream || echo 'No logs available yet'
            
            echo 'üîç Testing application response...'
            sleep 5  # Give the app time to start
            
            # Test multiple ports
            for port in 3000 8080 8000 5000; do
              if curl -f -s http://localhost:\$port > /dev/null; then
                echo '‚úÖ Application is responding on port '\$port
                break
              else
                echo '‚ö†Ô∏è No response on port '\$port
              fi
            done
            
            echo 'üîç Network status:'
            netstat -tlnp | grep -E ':(3000|8080|8000|5000)' || echo 'No services found on common ports'
            
            echo 'üîç PM2 process memory/CPU usage:'
            pm2 monit --no-interaction || echo 'Cannot show PM2 monitoring'
            
            echo '‚úÖ Deployment completed successfully!'
          "