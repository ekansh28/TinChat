// src/hooks/useOAuthSetup.ts
'use client';

import { useState, useEffect } from 'react';
import { useUser } from '@clerk/nextjs';

interface OAuthSetupState {
  needsUsernameSetup: boolean;
  isLoading: boolean;
  profile: any | null;
}

export function useOAuthSetup(): OAuthSetupState {
  const { user, isLoaded: userLoaded } = useUser();
  const [needsUsernameSetup, setNeedsUsernameSetup] = useState(false);
  const [isLoading, setIsLoading] = useState(true);
  const [profile, setProfile] = useState(null);

  useEffect(() => {
    if (!userLoaded) {
      console.log('⏳ useOAuthSetup: User not loaded yet');
      setIsLoading(true);
      return;
    }

    if (!user) {
      console.log('❌ useOAuthSetup: No user found');
      setIsLoading(false);
      setNeedsUsernameSetup(false);
      return;
    }

    const checkOAuthSetup = async () => {
      try {
        console.log('🔍 useOAuthSetup: Checking OAuth setup for user:', {
          userId: user.id,
          createdAt: user.createdAt,
          externalAccounts: user.externalAccounts?.map(acc => ({
            provider: acc.provider,
            emailAddress: acc.emailAddress
          }))
        });

        // First, determine if this is an OAuth user
        const hasExternalAccounts = user.externalAccounts && user.externalAccounts.length > 0;
        const hasOAuthProvider = user.externalAccounts?.some(acc => 
          acc.provider === 'google' || acc.provider === 'discord'
        );
        const isOAuthUser = hasExternalAccounts && hasOAuthProvider;

        console.log('🔗 OAuth user detection:', {
          hasExternalAccounts,
          hasOAuthProvider,
          isOAuthUser,
          providers: user.externalAccounts?.map(acc => acc.provider)
        });

        if (!isOAuthUser) {
          console.log('ℹ️ useOAuthSetup: Not an OAuth user, skipping setup check');
          setNeedsUsernameSetup(false);
          setIsLoading(false);
          return;
        }

        // Check if user has a complete profile
        console.log('📡 useOAuthSetup: Fetching profile from API...');
        const response = await fetch('/api/profile/load', {
          method: 'GET',
          headers: {
            'Content-Type': 'application/json',
          },
        });

        console.log('📡 Profile API response status:', response.status);

        if (!response.ok) {
          console.error('❌ useOAuthSetup: Failed to load profile:', response.status);
          
          // If we can't load profile but user exists, assume they need setup
          if (isOAuthUser) {
            console.log('🎯 useOAuthSetup: API failed but OAuth user detected, showing setup');
            setNeedsUsernameSetup(true);
          }
          setIsLoading(false);
          return;
        }

        const result = await response.json();
        console.log('📋 useOAuthSetup: Profile API result:', {
          success: result.success,
          hasData: !!result.data,
          profile: result.data ? {
            id: result.data.id,
            username: result.data.username,
            profile_complete: result.data.profile_complete,
            clerk_id: result.data.clerk_id
          } : null
        });

        if (result.success && result.data) {
          setProfile(result.data);
          
          console.log('🔍 useOAuthSetup: Analyzing profile for OAuth setup needs:', {
            isOAuthUser,
            profileComplete: result.data.profile_complete,
            username: result.data.username,
            isAutoGenerated: result.data.username === user.id || 
                           result.data.username?.startsWith('user_') ||
                           result.data.username?.includes(user.id.slice(-6))
          });

          // User needs username setup if:
          // 1. They're an OAuth user
          // 2. AND (profile isn't complete OR username looks auto-generated)
          const hasAutoGeneratedUsername = result.data.username === user.id ||
                                         result.data.username?.startsWith('user_') ||
                                         result.data.username?.includes(user.id.slice(-6));
          
          if (isOAuthUser && (!result.data.profile_complete || hasAutoGeneratedUsername)) {
            console.log('🎯 useOAuthSetup: OAuth user needs username setup');
            setNeedsUsernameSetup(true);
          } else {
            console.log('✅ useOAuthSetup: OAuth user setup is complete');
            setNeedsUsernameSetup(false);
          }
        } else {
          console.log('❌ useOAuthSetup: No profile found');
          
          // No profile found - OAuth user definitely needs setup
          if (isOAuthUser) {
            console.log('🎯 useOAuthSetup: New OAuth user needs username setup');
            setNeedsUsernameSetup(true);
          }
        }

      } catch (error) {
        console.error('❌ useOAuthSetup: OAuth setup check failed:', error);
        
        // On error, if we know it's an OAuth user, show setup just in case
        const isOAuthUser = user.externalAccounts?.some(acc => 
          acc.provider === 'google' || acc.provider === 'discord'
        );
        
        if (isOAuthUser) {
          console.log('🎯 useOAuthSetup: Error occurred but OAuth user detected, showing setup');
          setNeedsUsernameSetup(true);
        }
      } finally {
        setIsLoading(false);
      }
    };

    // Add delay to let webhook process for new users
    const timeoutId = setTimeout(checkOAuthSetup, 2000);
    return () => clearTimeout(timeoutId);
  }, [user, userLoaded]);

  return {
    needsUsernameSetup,
    isLoading,
    profile
  };
}